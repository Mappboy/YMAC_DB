# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-11-21 08:40
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import ymac_db.models
import ymac_db.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CaptureOrg',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organisation_name', models.TextField(db_index=True)),
                ('organisation_contact', models.CharField(blank=True, help_text='Main Contact Name', max_length=100, null=True)),
                ('organisation_email', models.EmailField(blank=True, help_text='Main Contact Email', max_length=254, null=True)),
                ('organisation_phone', models.CharField(blank=True, max_length=16, null=True)),
                ('organisation_address', models.TextField(blank=True, null=True)),
                ('organisation_suburb', models.TextField(blank=True, null=True)),
                ('organisation_state', models.CharField(blank=True, choices=[('WA', 'WA'), ('NSW', 'NSW'), ('ACT', 'ACT'), ('SA', 'SA'), ('QLD', 'QLD'), ('TAS', 'TAS'), ('VIC', 'VIC'), ('NT', 'NT')], max_length=3, null=True)),
                ('organisation_postcode', models.IntegerField(blank=True, null=True)),
                ('organisation_website', models.URLField(blank=True, null=True)),
            ],
            options={
                'managed': False,
                'db_table': 'ymac_db_captureorg',
            },
        ),
        migrations.CreateModel(
            name='Consultant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, db_index=True, max_length=70, null=True)),
                ('employee', models.NullBooleanField()),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
            ],
            options={
                'ordering': ('name',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DaaSite',
            fields=[
                ('place_id', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('legacy_id', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(blank=True, max_length=200, null=True)),
                ('status_reason', models.CharField(blank=True, max_length=200, null=True)),
                ('origin_place_id', models.CharField(blank=True, max_length=200, null=True)),
                ('type', models.CharField(blank=True, max_length=200, null=True)),
                ('region', models.CharField(blank=True, max_length=200, null=True)),
                ('restrictions', models.CharField(blank=True, max_length=200, null=True)),
                ('file_restricted', models.CharField(blank=True, max_length=200, null=True)),
                ('location_restricted', models.CharField(blank=True, max_length=200, null=True)),
                ('boundary_reliable', models.CharField(blank=True, max_length=200, null=True)),
                ('protected_area', models.CharField(blank=True, max_length=200, null=True)),
                ('protected_area_gazetted_date', models.CharField(blank=True, max_length=200, null=True)),
                ('national_estate_area', models.CharField(blank=True, max_length=200, null=True)),
                ('duplicate_id', models.CharField(blank=True, max_length=200, null=True)),
                ('boundary_last_update_date', models.CharField(blank=True, max_length=200, null=True)),
                ('shape_length', models.CharField(blank=True, max_length=200, null=True)),
                ('shape_area', models.CharField(blank=True, max_length=200, null=True)),
                ('objectid', models.BigIntegerField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4283)),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'DAA Site',
                'managed': False,
                'verbose_name_plural': 'DAA Sites',
                'db_table': 'daa_sites_new',
            },
        ),
        migrations.CreateModel(
            name='DaaSiteHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('place_id', models.CharField(max_length=20)),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('legacy_id', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(blank=True, max_length=200, null=True)),
                ('status_reason', models.CharField(blank=True, max_length=200, null=True)),
                ('origin_place_id', models.CharField(blank=True, max_length=200, null=True)),
                ('type', models.TextField(blank=True, null=True)),
                ('region', models.CharField(blank=True, max_length=200, null=True)),
                ('restrictions', models.CharField(blank=True, max_length=200, null=True)),
                ('file_restricted', models.CharField(blank=True, max_length=200, null=True)),
                ('location_restricted', models.CharField(blank=True, max_length=200, null=True)),
                ('boundary_reliable', models.CharField(blank=True, max_length=200, null=True)),
                ('protected_area', models.CharField(blank=True, max_length=200, null=True)),
                ('protected_area_gazetted_date', models.DateField(blank=True, null=True)),
                ('national_estate_area', models.CharField(blank=True, max_length=200, null=True)),
                ('duplicate_id', models.CharField(blank=True, max_length=200, null=True)),
                ('boundary_last_update_date', models.DateField(blank=True, null=True)),
                ('shape_length', models.CharField(blank=True, max_length=200, null=True)),
                ('shape_area', models.CharField(blank=True, max_length=200, null=True)),
                ('ymac_update', models.CharField(blank=True, max_length=200, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4283)),
                ('modified_time', models.DateTimeField()),
                ('operation', models.CharField(max_length=20)),
                ('area_difference', models.FloatField(blank=True, null=True)),
                ('geom_change', models.NullBooleanField()),
            ],
            options={
                'managed': False,
                'db_table': 'daa_site_history',
            },
        ),
        migrations.CreateModel(
            name='DataSuppliers',
            fields=[
                ('supplier', models.CharField(db_index=True, max_length=50, primary_key=True, serialize=False)),
            ],
            options={
                'managed': False,
                'db_table': 'data_suppliers',
            },
        ),
        migrations.CreateModel(
            name='ExternalClientSite',
            fields=[
                ('external_id', models.AutoField(primary_key=True, serialize=False)),
                ('external_site_id', models.TextField(blank=True, null=True)),
                ('site_name', models.TextField(blank=True, db_index=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.PolygonField(srid=4283)),
            ],
            options={
                'managed': False,
                'db_table': 'external_client_sites',
            },
        ),
        migrations.CreateModel(
            name='HeritageCompanies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_code', models.IntegerField(unique=True)),
                ('company_name', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NnttDetermination',
            fields=[
                ('tribid', models.CharField(blank=True, max_length=30, null=True)),
                ('name', models.CharField(blank=True, db_index=True, max_length=250, null=True)),
                ('fcno', models.CharField(blank=True, max_length=254, null=True)),
                ('fcname', models.CharField(blank=True, max_length=250, null=True)),
                ('detbody', models.CharField(blank=True, max_length=100, null=True)),
                ('detdate', models.DateField(blank=True, null=True)),
                ('detregdate', models.DateField(blank=True, null=True)),
                ('detmethod', models.CharField(blank=True, max_length=100, null=True)),
                ('dettype', models.CharField(blank=True, max_length=100, null=True)),
                ('detoutcome', models.CharField(blank=True, max_length=70, null=True)),
                ('appealdesc', models.CharField(blank=True, max_length=40, null=True)),
                ('judge', models.CharField(blank=True, max_length=254, null=True)),
                ('rntbcname', models.CharField(blank=True, max_length=254, null=True)),
                ('nthold', models.CharField(blank=True, max_length=254, null=True)),
                ('relntda', models.CharField(blank=True, max_length=200, null=True)),
                ('detinfull', models.CharField(blank=True, max_length=1, null=True)),
                ('areasqkm', models.FloatField(blank=True, null=True)),
                ('datasource', models.CharField(blank=True, max_length=60, null=True)),
                ('datecurr', models.DateField(blank=True, null=True)),
                ('seadet', models.CharField(blank=True, max_length=1, null=True)),
                ('zonelwm', models.CharField(blank=True, max_length=1, null=True)),
                ('zone3nm', models.CharField(blank=True, max_length=1, null=True)),
                ('zone12nm', models.CharField(blank=True, max_length=1, null=True)),
                ('zone24nm', models.CharField(blank=True, max_length=1, null=True)),
                ('zoneeez', models.CharField(blank=True, max_length=1, null=True)),
                ('nnttseqno', models.CharField(max_length=14, primary_key=True, serialize=False)),
                ('objectind', models.CharField(blank=True, max_length=1, null=True)),
                ('sptialnote', models.CharField(blank=True, max_length=120, null=True)),
                ('link', models.CharField(blank=True, max_length=254, null=True)),
                ('juris', models.CharField(blank=True, max_length=10, null=True)),
                ('overlap', models.CharField(blank=True, max_length=20, null=True)),
                ('tribno', models.CharField(blank=True, max_length=20, null=True)),
                ('anthro', models.CharField(blank=True, max_length=200, null=True)),
                ('claimgroup', models.CharField(blank=True, max_length=200, null=True)),
                ('lawyer', models.CharField(blank=True, max_length=200, null=True)),
                ('hs_officer', models.CharField(blank=True, max_length=200, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4283)),
            ],
            options={
                'managed': False,
                'db_table': 'nntt_determinations',
            },
        ),
        migrations.CreateModel(
            name='RelatedSurveyCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rel_survey_id', models.CharField(db_index=True, max_length=10)),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RestrictionStatus',
            fields=[
                ('rid', models.AutoField(primary_key=True, serialize=False)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female')], db_index=True, max_length=12, null=True)),
                ('claim', models.NullBooleanField(db_index=True)),
            ],
            options={
                'managed': False,
                'verbose_name_plural': 'Restriction Status',
                'db_table': 'restriction_status',
            },
        ),
        migrations.CreateModel(
            name='SampleMethodology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sampling_meth', models.CharField(db_index=True, max_length=20, unique=True)),
            ],
            options={
                'managed': False,
                'db_table': 'sample_methodology',
            },
        ),
        migrations.CreateModel(
            name='SamplingConfidence',
            fields=[
                ('sampling_conf', models.CharField(db_index=True, max_length=30)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'managed': False,
                'db_table': 'sampling_confidence',
            },
        ),
        migrations.CreateModel(
            name='SiteDescriptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_description', models.CharField(choices=[('Artefacts / Scatter', 'Artefacts / Scatter'), ('Birthplace', 'Birthplace'), ('Ceremonial', 'Ceremonial'), ('Engravings', 'Engravings'), ('Grinding Patch', 'Grinding Patch'), ('Gnamma Hole', 'Gnamma Hole'), ('Mythological', 'Mythological')], db_index=True, max_length=60)),
            ],
            options={
                'managed': False,
                'verbose_name_plural': 'Site Descriptions',
                'db_table': 'ymac_db_sitedescriptions',
            },
        ),
        migrations.CreateModel(
            name='SiteDocument',
            fields=[
                ('doc_id', models.AutoField(primary_key=True, serialize=False)),
                ('document_type', models.CharField(choices=[('Image', 'Image'), ('Audio', 'Audio'), ('Video', 'Video'), ('Document', 'Document'), ('Spatial', 'Spatial'), ('Map', 'Map'), ('Other', 'Other')], max_length=15)),
                ('filepath', models.CharField(blank=True, max_length=255, null=True)),
                ('filename', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
            ],
            options={
                'managed': False,
                'db_table': 'site_documents',
            },
        ),
        migrations.CreateModel(
            name='SiteUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_name', models.CharField(blank=True, db_index=True, max_length=70, null=True)),
                ('employee', models.NullBooleanField()),
                ('email', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'ordering': ('user_name',),
                'managed': False,
                'db_table': 'ymac_db_siteuser',
            },
        ),
        migrations.CreateModel(
            name='SurveyMethodology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('survey_meth', models.CharField(db_index=True, max_length=40)),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SurveyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_id', models.CharField(max_length=4, unique=True)),
                ('description', models.CharField(blank=True, db_index=True, max_length=25, null=True, unique=True)),
            ],
            options={
                'managed': False,
                'db_table': 'survey_types',
            },
        ),
        migrations.CreateModel(
            name='Tenement',
            fields=[
                ('type', models.CharField(blank=True, max_length=50, null=True)),
                ('survstatus', models.CharField(blank=True, max_length=15, null=True)),
                ('tenstatus', models.CharField(blank=True, max_length=10, null=True)),
                ('startdate', models.DateField(blank=True, null=True)),
                ('starttime', models.CharField(blank=True, max_length=8, null=True)),
                ('enddate', models.DateField(blank=True, null=True)),
                ('endtime', models.CharField(blank=True, max_length=8, null=True)),
                ('grantdate', models.DateField(blank=True, null=True)),
                ('granttime', models.CharField(blank=True, max_length=8, null=True)),
                ('fmt_tenid', models.CharField(db_index=True, max_length=16, primary_key=True, serialize=False)),
                ('legal_area', models.DecimalField(blank=True, decimal_places=15, max_digits=31, null=True)),
                ('special_in', models.CharField(blank=True, max_length=1, null=True)),
                ('extract_da', models.DateField(blank=True, null=True)),
                ('combined_r', models.CharField(blank=True, max_length=10, null=True)),
                ('all_holder', models.CharField(blank=True, max_length=254, null=True)),
                ('tribid', models.CharField(blank=True, max_length=200, null=True)),
                ('claim_groups', models.CharField(blank=True, max_length=200, null=True)),
                ('ymac_region', models.NullBooleanField()),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4283)),
            ],
            options={
                'managed': False,
                'db_table': 'tenement',
            },
        ),
        migrations.CreateModel(
            name='TenementsYmac',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fmt_tenid', models.CharField(blank=True, max_length=20, null=True)),
                ('claim_groups', models.CharField(blank=True, max_length=200, null=True)),
                ('type', models.CharField(blank=True, max_length=200, null=True)),
                ('survstatus', models.CharField(blank=True, max_length=200, null=True)),
                ('tenstatus', models.CharField(blank=True, max_length=200, null=True)),
                ('startdate', models.DateField(blank=True, null=True)),
                ('starttime', models.TimeField(blank=True, null=True)),
                ('enddate', models.DateField(blank=True, null=True)),
                ('endtime', models.TimeField(blank=True, null=True)),
                ('grantdate', models.DateField(blank=True, null=True)),
                ('granttime', models.TimeField(blank=True, null=True)),
                ('legal_area', models.FloatField(blank=True, null=True)),
                ('unit_of_me', models.CharField(blank=True, max_length=200, null=True)),
                ('special_in', models.CharField(blank=True, max_length=200, null=True)),
                ('extract_da', models.CharField(blank=True, max_length=200, null=True)),
                ('combined_r', models.CharField(blank=True, max_length=200, null=True)),
                ('all_holder', models.CharField(blank=True, max_length=300, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4283)),
            ],
            options={
                'managed': False,
                'db_table': 'tenements_ymac',
            },
        ),
        migrations.CreateModel(
            name='Tenure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alt_pityp', models.CharField(blank=True, max_length=1, null=True)),
                ('area', models.FloatField(blank=True, null=True)),
                ('centlat', models.FloatField(blank=True, null=True)),
                ('centlong', models.FloatField(blank=True, null=True)),
                ('date_execution', models.DateField(blank=True, null=True)),
                ('date_surveyed', models.TextField(blank=True, null=True)),
                ('date_time_boundary_modified', models.DateField(blank=True, null=True)),
                ('date_time_legal', models.DateField(blank=True, null=True)),
                ('date_time_polygon_created', models.DateField(blank=True, null=True)),
                ('date_time_polygon_modified', models.DateField(blank=True, null=True)),
                ('date_updated', models.DateTimeField(blank=True, null=True)),
                ('dealing_year', models.IntegerField(blank=True, null=True)),
                ('dlg_id', models.IntegerField(blank=True, null=True)),
                ('family_name', models.CharField(blank=True, max_length=255, null=True)),
                ('fol_rec_id', models.IntegerField(blank=True, null=True)),
                ('given_name', models.CharField(blank=True, max_length=255, null=True)),
                ('gprpfx', models.CharField(blank=True, max_length=2, null=True)),
                ('gprsfx', models.CharField(blank=True, max_length=4, null=True)),
                ('land_id_number', models.IntegerField()),
                ('legal_area', models.FloatField(blank=True, null=True)),
                ('locality', models.CharField(blank=True, max_length=200, null=True)),
                ('lot_name', models.CharField(blank=True, max_length=60, null=True)),
                ('lot_number', models.IntegerField(blank=True, null=True)),
                ('lot_type', models.CharField(blank=True, max_length=6, null=True)),
                ('organisation_code', models.CharField(blank=True, max_length=4, null=True)),
                ('piparcel', models.CharField(blank=True, max_length=17, null=True)),
                ('pityp', models.CharField(blank=True, max_length=1, null=True)),
                ('polygon_number', models.IntegerField()),
                ('postcode', models.CharField(blank=True, max_length=4, null=True)),
                ('proprietor', models.CharField(blank=True, max_length=255, null=True)),
                ('rd_name', models.CharField(blank=True, max_length=40, null=True)),
                ('rd_type', models.CharField(blank=True, max_length=4, null=True)),
                ('region', models.CharField(blank=True, max_length=5, null=True)),
                ('sale_date', models.DateField(blank=True, null=True)),
                ('the_geom', models.TextField(blank=True, null=True)),
                ('usage_code', models.IntegerField(blank=True, null=True)),
                ('zone', models.IntegerField(blank=True, null=True)),
                ('gml_parent_id', models.TextField(blank=True, null=True)),
                ('gml_parent_property', models.TextField(blank=True, null=True)),
                ('gml_id', models.TextField(blank=True, null=True)),
                ('view_scale', models.CharField(blank=True, max_length=1, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4283)),
                ('dealing_type', models.CharField(blank=True, max_length=2, null=True)),
                ('register', models.CharField(blank=True, max_length=13, null=True)),
                ('address_no_type', models.CharField(blank=True, max_length=1, null=True)),
            ],
            options={
                'managed': False,
                'db_table': 'tenure',
            },
        ),
        migrations.CreateModel(
            name='YmacEmitTenements',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=20)),
                ('objectiondate', models.TextField(blank=True, null=True)),
                ('datereceived', models.DateField(blank=True, null=True)),
                ('applicants', models.CharField(blank=True, max_length=200, null=True)),
                ('row_to_check', models.NullBooleanField()),
                ('claimgroup', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), size=None)),
                ('ymac_region', models.NullBooleanField()),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, srid=4283)),
            ],
            options={
                'ordering': ('datereceived', 'title'),
                'managed': False,
                'db_table': 'ymac_db_emits_tenement',
            },
        ),
        migrations.CreateModel(
            name='YmacHeritageStaging',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.CharField(blank=True, max_length=7, null=True)),
                ('survey_trip_id', models.IntegerField()),
                ('survey_id', models.CharField(blank=True, max_length=60, null=True)),
                ('trip_number', models.SmallIntegerField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=20, null=True)),
                ('source', models.CharField(blank=True, max_length=100, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('claimgroup', models.TextField(blank=True, null=True)),
                ('survey_type', models.CharField(blank=True, max_length=25, null=True)),
                ('sampling_meth', models.CharField(blank=True, max_length=20, null=True)),
                ('sampling_conf', models.CharField(blank=True, max_length=60, null=True)),
                ('ymac_svy_name', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('survey_name', models.CharField(blank=True, max_length=200, null=True)),
                ('date_create', models.DateField(blank=True, null=True)),
                ('created_by', models.CharField(blank=True, max_length=50, null=True)),
                ('date_mod', models.DateField(blank=True, null=True)),
                ('mod_by', models.CharField(blank=True, max_length=50, null=True)),
                ('propref', models.CharField(blank=True, max_length=200, null=True)),
                ('data_supplier', models.CharField(blank=True, max_length=50, null=True)),
                ('data_qa', models.TextField(blank=True, null=True)),
                ('collected_by', models.CharField(blank=True, max_length=60, null=True)),
                ('rio_area_codes', models.TextField(blank=True, null=True)),
                ('survey_methodology', models.TextField(blank=True, null=True)),
                ('date_from', models.DateField(blank=True, null=True)),
                ('date_to', models.DateField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('modified_time', models.DateTimeField()),
            ],
            options={
                'managed': False,
                'db_table': 'ymac_heritage_staging',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Research', 'Research'), ('Heritage', 'Heritage'), ('Legal', 'Legal'), ('Future Acts', 'Future Acts'), ('Communications', 'Communications'), ('Finance', 'Finance'), ('Knowledge Partnerships', 'Knowledge Partnerships'), ('Other', 'Other')], db_index=True, max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='DocumentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('Image', 'Image'), ('Audio', 'Audio'), ('Video', 'Video'), ('Document', 'Document'), ('Spatial', 'Spatial'), ('Map', 'Map'), ('Other', 'Other')], db_index=True, max_length=15)),
                ('sub_type', models.CharField(blank=True, choices=[('GPX', 'GPX'), ('Shapefile', 'Shapefile'), ('Mapinfo', 'Mapinfo'), ('Geodatabase', 'Geodatabase'), ('Google KML', 'Google KML'), ('Preliminary Advice', 'Preliminary Advice'), ('Survey Report', 'Survey Report'), ('HISF', 'Heritage Information Submission Form'), ('Zipped', 'Zipped')], db_index=True, max_length=40, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Emit',
            fields=[
                ('title', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('content', models.TextField(blank=True, null=True)),
                ('id', models.TextField(blank=True, null=True)),
                ('publisheddate', models.TextField(blank=True, null=True)),
                ('linkuri', models.TextField(blank=True, null=True)),
                ('field_minfield', models.CharField(blank=True, db_column='_minfield', max_length=200, null=True)),
                ('possibleclaimgroups', models.CharField(blank=True, max_length=200, null=True)),
                ('datereceived', models.DateField()),
                ('markout', models.CharField(blank=True, max_length=200, null=True)),
                ('area', models.CharField(blank=True, max_length=200, null=True)),
                ('shire', models.CharField(blank=True, max_length=200, null=True)),
                ('applicants', models.CharField(blank=True, max_length=200, null=True)),
                ('objectiondate', models.CharField(blank=True, max_length=200, null=True)),
                ('miningregistrar', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'emit',
            },
        ),
        migrations.CreateModel(
            name='FileCleanUp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_path', models.TextField(db_index=True)),
                ('submitted_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HeritageSite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('boundary_description', models.CharField(blank=True, choices=[('Complete Accurate', 'Complete Accurate'), ('Incomplete Accurate', 'Incomplete Accurate'), ('Complete Inferred', 'Complete Inferred'), ('Incomplete Inferred', 'Incomplete Inferred'), ('Unknown', 'Unknown')], max_length=30, null=True)),
                ('disturbance_level', models.CharField(blank=True, choices=[('Negligible', 'Negligible'), ('Minimal', 'Minimal'), ('Moderate', 'Moderate'), ('Significant', 'Significant'), ('Major', 'Major')], max_length=30, null=True)),
                ('status', models.CharField(blank=True, choices=[('Protected', 'Protected'), ('Cleared', 'Cleared'), ('Restricted', 'Restricted'), ('Provisional', 'Provisional'), ('Stored Data', 'Stored Data')], max_length=15, null=True)),
                ('site_comments', models.TextField(blank=True, null=True)),
                ('documents', models.ManyToManyField(related_name='heritagesites', to='ymac_db.SiteDocument')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='HeritageSurvey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('survey_id', models.CharField(db_index=True, max_length=10, validators=[ymac_db.validators.valid_surveyid])),
                ('original_ymac_id', models.CharField(blank=True, max_length=50, null=True)),
                ('trip_number', models.SmallIntegerField(blank=True, db_index=True, null=True)),
                ('date_from', models.DateField(blank=True, null=True)),
                ('date_to', models.DateField(blank=True, null=True)),
                ('project_name', models.TextField(blank=True, db_index=True, help_text='Internal or Survey Project Name', null=True)),
                ('project_status', models.CharField(blank=True, choices=[('On Hold', 'On Hold'), ('In Progress', 'In Progress'), ('Date Set', 'Date Set'), ('Proposed Date', 'Proposed Date'), ('Cancelled', 'Cancelled'), ('Completed', 'Completed'), ('Postponed', 'Postponed'), ('Heritage Notice Recd', 'Heritage Notice Recd'), ('PA Received', 'PA Received'), ('PA Sent to Proponent', 'PA Sent to Proponent'), ('Draft Report Received', 'Draft Report Received'), ('Final Report Received', 'Final Report Received'), ('Field Work Completed', 'Field Work Completed'), ('Unknown', 'Unknown')], db_index=True, default=3, max_length=25, null=True)),
                ('survey_region', models.CharField(blank=True, choices=[('Pilbara', 'Pilbara'), ('Yamatji', 'Yamatji'), ('Both', 'Both')], max_length=15, null=True)),
                ('survey_description', models.TextField(blank=True, help_text='Description of the proposed or actual survey', null=True)),
                ('survey_note', models.TextField(blank=True, help_text='Additional Survey notes', null=True)),
                ('date_create', models.DateField(blank=True, null=True)),
                ('date_mod', models.DateField(blank=True, null=True)),
                ('data_qa', models.BooleanField(default=False, help_text='Has Actual data been checked by Spatial Team')),
                ('spatial_data_exists', models.BooleanField(default=False, help_text='Do we know if there is actually spatial data for the survey?')),
                ('folder_location', models.TextField(blank=True, db_index=True, help_text='Location on Z drive of folder')),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4283)),
                ('consultants', models.ManyToManyField(blank=True, db_index=True, help_text='Consultants for survey', to='ymac_db.Consultant')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_user', to='ymac_db.SiteUser')),
            ],
            options={
                'ordering': ('survey_id', 'date_create'),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='HeritageSurveyData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('survey_part', models.IntegerField(help_text='Polygon number for survey, must be unique')),
                ('label', models.TextField(blank=True, help_text='If the data should be labelled', null=True)),
                ('notes', models.TextField(blank=True, help_text='Any notes attached to the data', null=True)),
                ('geom', django.contrib.gis.db.models.fields.PolygonField(srid=4283)),
                ('survey', models.ForeignKey(help_text='The survey to which the data relates to', on_delete=django.db.models.deletion.CASCADE, to='ymac_db.HeritageSurvey')),
            ],
        ),
        migrations.CreateModel(
            name='PotentialSurvey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('survey_id', models.CharField(max_length=15)),
                ('data_path', models.TextField()),
                ('path_type', models.CharField(blank=True, choices=[('Spatial File', 'Spatial File'), ('Directory', 'Directory'), ('Survey Report', 'Survey Report'), ('Photo', 'Photo'), ('Prelim Advice', 'Prelim Advice'), ('HISF', 'HISF')], max_length=15)),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Proponent',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('prop_id', models.CharField(max_length=40)),
                ('name', models.TextField(db_index=True)),
                ('contact', models.TextField(blank=True, null=True)),
                ('email', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ('name',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RequestType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=45)),
            ],
        ),
        migrations.CreateModel(
            name='RequestUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('office', models.CharField(choices=[('Perth', 'Perth'), ('Geraldton', 'Geraldton'), ('South Hedland', 'South Hedland'), ('Tom Price', 'Tom Price'), ('Karratha', 'Karratha'), ('Pilbara', 'Pilbara')], default='Perth', max_length=20)),
                ('current_user', models.BooleanField(default=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ymac_db.Department')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ResearchSite',
            fields=[
                ('research_site_id', models.AutoField(primary_key=True, serialize=False)),
                ('site_location', models.TextField(blank=True, help_text='If need, provide a site description', null=True)),
                ('site_other_coordinates', models.TextField(blank=True, help_text='Any other coordinates for the site', null=True)),
                ('proponent_codes', models.TextField(blank=True, help_text='Any proponent codes for matching', null=True)),
                ('site_comments', models.TextField(blank=True, null=True)),
                ('ethno_detail', models.TextField(blank=True, null=True)),
                ('reference', models.TextField(blank=True, help_text='Field Notes', null=True)),
                ('site_name', models.TextField(blank=True, db_index=True, null=True)),
                ('site_label', models.TextField(blank=True, null=True)),
                ('alt_site_name', models.TextField(blank=True, null=True)),
                ('site_number', models.IntegerField(blank=True, null=True)),
                ('family_affiliation', models.TextField(blank=True, help_text='The family that speaks for that site', null=True)),
                ('mapsheet', models.TextField(blank=True, null=True)),
                ('documents', models.ManyToManyField(db_column='site_id', related_name='researchdocuments', to='ymac_db.SiteDocument')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_recorded', models.DateField(blank=True, null=True)),
                ('group_name', models.TextField(blank=True, help_text='Is this site part of a group of sites or complex?', null=True)),
                ('site_identifier', models.CharField(blank=True, db_index=True, help_text='Site name to help you identify it', max_length=200, null=True)),
                ('date_created', models.DateField(blank=True, null=True)),
                ('orig_x_val', models.FloatField(blank=True, help_text='Latitude/Northing Value', null=True)),
                ('orig_y_val', models.FloatField(blank=True, help_text='Longitude/Easting Value', null=True)),
                ('buffer', models.IntegerField(default=10, help_text='Site buffer in meters')),
                ('coordinate_accuracy', models.CharField(blank=True, choices=[('Located', 'Located'), ('Position Indicative', 'Position Indicative'), ('Approximate', 'Approximate'), ('Unknown', 'Unknown')], max_length=30, null=True)),
                ('active', models.NullBooleanField()),
                ('capture_coord_sys', models.IntegerField(blank=True, choices=[(4326, 'WGS84 LL'), (4283, 'GDA94 LL'), (4203, 'AGD84 LL'), (4202, 'AGD66 LL'), (28349, 'MGA Zone 49'), (28350, 'MGA Zone 50'), (28351, 'MGA Zone 51'), (28352, 'MGA Zone 52'), (32749, 'UTM Zone 49'), (32750, 'UTM Zone 50'), (32751, 'UTM Zone 51'), (32752, 'UTM Zone 52'), (20349, 'AGD84/ Zone 49'), (20350, 'AGD84/ Zone 50'), (20351, 'AGD84/ Zone 51'), (20352, 'AGD84/ Zone 52'), (20249, 'AGD66/ Zone 49'), (20250, 'AGD66/ Zone 50'), (20251, 'AGD66/ Zone 51'), (20252, 'AGD66/ Zone 52')], null=True)),
                ('label_x_ll', models.FloatField(blank=True, help_text='Used for setting labels in qgis', null=True)),
                ('label_y_ll', models.FloatField(blank=True, help_text='Used for setting labels in qgis', null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4283)),
                ('created_by', models.ForeignKey(blank=True, db_column='created_by', on_delete=django.db.models.deletion.CASCADE, related_name='site_created_by', to='ymac_db.SiteUser')),
                ('daa_sites', models.ManyToManyField(blank=True, to='ymac_db.DaaSite')),
                ('docs', models.ManyToManyField(blank=True, to='ymac_db.SiteDocument')),
                ('recorded_by', models.ForeignKey(blank=True, db_column='recorded_by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='site_recorded_by', to='ymac_db.SiteUser')),
                ('restricted_status', models.ForeignKey(blank=True, db_column='restricted_status', null=True, on_delete=django.db.models.deletion.CASCADE, to='ymac_db.RestrictionStatus')),
                ('surveys', models.ManyToManyField(blank=True, to='ymac_db.HeritageSurvey')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SiteInformant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SiteType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_classification', models.CharField(max_length=100)),
                ('site_category', models.CharField(blank=True, choices=[('Ethnographic', 'Ethnographic'), ('Archeological', 'Archeological'), ('Arch & Ethno', 'Arch & Ethno')], max_length=30, null=True)),
            ],
            options={
                'ordering': ('site_classification',),
            },
        ),
        migrations.CreateModel(
            name='SurveyCleaning',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_path', models.TextField(db_index=True)),
                ('path_type', models.CharField(blank=True, choices=[('Spatial File', 'Spatial File'), ('Directory', 'Directory'), ('Survey Report', 'Survey Report'), ('Photo', 'Photo'), ('Prelim Advice', 'Prelim Advice'), ('HISF', 'HISF')], db_index=True, max_length=15)),
            ],
            options={
                'ordering': ('surveys__survey_id', 'data_path'),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SurveyDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filepath', models.TextField(blank=True, db_index=True, null=True)),
                ('filename', models.CharField(blank=True, db_index=True, max_length=200, null=True, validators=[ymac_db.validators.valid_extension])),
                ('title', models.TextField(blank=True)),
                ('document_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ymac_db.DocumentType')),
            ],
        ),
        migrations.CreateModel(
            name='SurveyGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(db_index=True, max_length=35)),
                ('group_id', models.CharField(max_length=3)),
                ('determined', models.BooleanField()),
                ('status', models.CharField(choices=[('Represented', 'Represented'), ('Discontinued', 'Discontinued')], default='Represented', help_text='Does YMAC Represent the Claim', max_length=15)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, srid=4283)),
                ('future_act_officer', models.ForeignKey(blank=True, default=71, on_delete=django.db.models.deletion.CASCADE, related_name='futureactuser', to='ymac_db.SiteUser')),
                ('heritage_officer', models.ForeignKey(blank=True, default=72, on_delete=django.db.models.deletion.CASCADE, related_name='heritageuser', to='ymac_db.SiteUser')),
            ],
            options={
                'ordering': ('group_name',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SurveyProponentCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proponent_code', models.CharField(blank=True, db_index=True, max_length=20, null=True)),
                ('proponent', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='ymac_db.Proponent')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SurveyStatus',
            fields=[
                ('survey_status_id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(blank=True, db_index=True, max_length=15, null=True, unique=True)),
            ],
            options={
                'ordering': ('status',),
                'managed': True,
                'db_table': 'survey_status',
            },
        ),
        migrations.CreateModel(
            name='SurveyTripCleaning',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cleaning_comment', models.TextField()),
                ('data_path', models.TextField(db_index=True)),
                ('path_type', models.CharField(blank=True, choices=[('Spatial File', 'Spatial File'), ('Directory', 'Directory'), ('Survey Report', 'Survey Report'), ('Photo', 'Photo'), ('Prelim Advice', 'Prelim Advice'), ('HISF', 'HISF')], max_length=15)),
                ('survey_trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ymac_db.HeritageSurvey')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TenementsAll',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fmt_tenid', models.CharField(blank=True, max_length=20, null=True)),
                ('type', models.CharField(blank=True, max_length=200, null=True)),
                ('survstatus', models.CharField(blank=True, max_length=200, null=True)),
                ('tenstatus', models.CharField(blank=True, max_length=200, null=True)),
                ('startdate', models.DateField(blank=True, null=True)),
                ('starttime', models.TimeField(blank=True, null=True)),
                ('enddate', models.DateField(blank=True, null=True)),
                ('endtime', models.TimeField(blank=True, null=True)),
                ('grantdate', models.DateField(blank=True, null=True)),
                ('granttime', models.TimeField(blank=True, null=True)),
                ('legal_area', models.FloatField(blank=True, null=True)),
                ('unit_of_me', models.CharField(blank=True, max_length=200, null=True)),
                ('special_in', models.CharField(blank=True, max_length=200, null=True)),
                ('combined_r', models.CharField(blank=True, max_length=200, null=True)),
                ('all_holder', models.CharField(blank=True, max_length=300, null=True)),
                ('claim_groups', models.CharField(blank=True, max_length=200, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4283)),
            ],
            options={
                'managed': True,
                'db_table': 'tenements_all',
            },
        ),
        migrations.CreateModel(
            name='YACReturn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pa', models.BooleanField(default=False)),
                ('report', models.BooleanField(default=False)),
                ('spatial', models.BooleanField(default=False)),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ymac_db.HeritageSurvey')),
            ],
        ),
        migrations.CreateModel(
            name='YmacClaim',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tribid', models.CharField(blank=True, max_length=30, null=True)),
                ('name', models.CharField(blank=True, db_index=True, max_length=102, null=True)),
                ('fcno', models.CharField(blank=True, max_length=20, null=True)),
                ('datelodged', models.DateField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=30, null=True)),
                ('datestatus', models.DateField(blank=True, null=True)),
                ('rtstatus', models.CharField(blank=True, max_length=40, null=True)),
                ('datertdec', models.DateField(blank=True, null=True)),
                ('datereg', models.DateField(blank=True, null=True)),
                ('datentri', models.DateField(blank=True, null=True)),
                ('datenotncl', models.DateField(blank=True, null=True)),
                ('datefcord', models.DateField(blank=True, null=True)),
                ('combined', models.CharField(blank=True, max_length=1, null=True)),
                ('parentno', models.CharField(blank=True, max_length=12, null=True)),
                ('rep', models.CharField(blank=True, max_length=102, null=True)),
                ('casemgr', models.CharField(blank=True, max_length=25, null=True)),
                ('member', models.CharField(blank=True, max_length=254, null=True)),
                ('appltype', models.CharField(blank=True, max_length=50, null=True)),
                ('areasqkm', models.FloatField(blank=True, null=True)),
                ('datasource', models.CharField(blank=True, max_length=60, null=True)),
                ('datecurr', models.DateField(blank=True, null=True)),
                ('seaclaim', models.CharField(blank=True, max_length=1, null=True)),
                ('zonelwm', models.CharField(blank=True, max_length=1, null=True)),
                ('zone3nm', models.CharField(blank=True, max_length=1, null=True)),
                ('zone12nm', models.CharField(blank=True, max_length=1, null=True)),
                ('zone24nm', models.CharField(blank=True, max_length=1, null=True)),
                ('zoneeez', models.CharField(blank=True, max_length=1, null=True)),
                ('nnttseqno', models.CharField(max_length=14)),
                ('objectind', models.CharField(blank=True, max_length=1, null=True)),
                ('sptialnote', models.CharField(blank=True, max_length=120, null=True)),
                ('juris', models.CharField(blank=True, max_length=10, null=True)),
                ('overlap', models.CharField(blank=True, max_length=20, null=True)),
                ('tribno', models.CharField(blank=True, max_length=10, null=True)),
                ('ymacregion', models.CharField(blank=True, max_length=200, null=True)),
                ('claimgroup', models.CharField(blank=True, max_length=200, null=True)),
                ('anthro', models.CharField(blank=True, max_length=200, null=True)),
                ('lawyer', models.CharField(blank=True, max_length=200, null=True)),
                ('hs_officer', models.CharField(blank=True, max_length=200, null=True)),
                ('date_created', models.DateTimeField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4283)),
                ('claim_group_id', models.CharField(blank=True, max_length=5, null=True)),
                ('current', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('name',),
                'managed': True,
                'db_table': 'ymac_claims',
            },
        ),
        migrations.CreateModel(
            name='YmacRegion',
            fields=[
                ('org', models.CharField(blank=True, max_length=100, null=True)),
                ('name', models.CharField(blank=True, db_index=True, max_length=40, null=True)),
                ('gazetted', models.DateField(blank=True, null=True)),
                ('effective', models.DateField(blank=True, null=True)),
                ('comments', models.CharField(blank=True, max_length=120, null=True)),
                ('juris', models.CharField(blank=True, max_length=20, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'managed': True,
                'db_table': 'YMAC_region',
            },
        ),
        migrations.CreateModel(
            name='YMACRequestFiles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=ymac_db.models.user_directory_path)),
            ],
        ),
        migrations.CreateModel(
            name='YMACSpatialRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(blank=True, choices=[('Pilbara', 'Pilbara'), ('Yamatji', 'Yamatji'), ('Both', 'Both')], max_length=15)),
                ('job_desc', models.TextField()),
                ('job_control', models.CharField(blank=True, max_length=9, validators=[ymac_db.validators.valid_job_number])),
                ('map_size', models.CharField(blank=True, choices=[('A0', 'A0'), ('A1', 'A1'), ('A2', 'A2'), ('A3', 'A3'), ('A4', 'A4'), ('Other', 'Other (Please describe in Other Instructions)')], help_text='If you know what size map you wish then please select.', max_length=20, null=True)),
                ('required_by', models.DateField()),
                ('request_datetime', models.DateTimeField(auto_now_add=True)),
                ('completed_datetime', models.DateTimeField(blank=True)),
                ('product_type', models.CharField(blank=True, choices=[('Digital only', 'Digital only'), ('Hard Copy Posted', 'Hard Copy Posted'), ('Digital and Hard Copy', 'Digital and Hard Copy'), ('Other (please specify below)', 'Other (please specify below)')], max_length=25)),
                ('other_instructions', models.TextField(blank=True)),
                ('cost_centre', models.CharField(blank=True, choices=[('DPMC', 'DPMC'), ('Cost Recovery', 'Cost Recovery'), ('Non DPMC/Non Cost Recovery', 'Non DPMC/Non Cost Recovery')], max_length=30)),
                ('priority', models.CharField(choices=[('High Urgent', 'High Urgent'), ('High NOT Urgent', 'High NOT Urgent'), ('Medium Urgent', 'Medium Urgent'), ('Medium NOT Urgent', 'Medium NOT Urgent'), ('Low Urgent', 'Low Urgent'), ('Low NOT Urgent', 'Low NOT Urgent')], help_text='Please estimate urgency and priority to assist spatial team to prioritise their task list', max_length=25)),
                ('map_requested', models.BooleanField(default=False)),
                ('data', models.BooleanField(default=False)),
                ('analysis', models.BooleanField(default=False)),
                ('other', models.BooleanField(default=False)),
                ('draft', models.BooleanField(default=False)),
                ('done', models.BooleanField(default=False)),
                ('time_spent', models.FloatField(blank=True)),
                ('request_area', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4283)),
                ('sup_data_text', models.TextField(blank=True, help_text='For large amounts of data please indicate the folder where it can be found. Alternatively you can upload it with the request form or send an email to spatialjobs@ymac.org.au.')),
            ],
            options={
                'ordering': ('-job_control', '-required_by'),
            },
        ),
        migrations.CreateModel(
            name='YmacStaff',
            fields=[
                ('username', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('email', models.CharField(blank=True, max_length=70, null=True)),
                ('full_name', models.CharField(blank=True, db_index=True, max_length=70, null=True)),
                ('last_name', models.CharField(blank=True, max_length=40, null=True)),
                ('first_name', models.CharField(blank=True, max_length=30, null=True)),
                ('current_staff', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ('first_name', 'last_name'),
                'managed': True,
                'verbose_name_plural': 'YMAC Staff',
                'db_table': 'ymac_staff',
            },
        ),
        migrations.AddField(
            model_name='ymacspatialrequest',
            name='assigned_to',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='ymac_db.YmacStaff'),
        ),
        migrations.AddField(
            model_name='ymacspatialrequest',
            name='cc_recipients',
            field=models.ManyToManyField(blank=True, help_text='You can select multiple recipients', related_name='cc_recipients', to='ymac_db.RequestUser'),
        ),
        migrations.AddField(
            model_name='ymacspatialrequest',
            name='claim',
            field=models.ManyToManyField(blank=True, to='ymac_db.YmacClaim'),
        ),
        migrations.AddField(
            model_name='ymacspatialrequest',
            name='proponent',
            field=models.ForeignKey(blank=True, help_text='Proponent (if known)', null=True, on_delete=django.db.models.deletion.CASCADE, to='ymac_db.Proponent'),
        ),
        migrations.AddField(
            model_name='ymacspatialrequest',
            name='related_jobs',
            field=models.ManyToManyField(blank=True, help_text='Optional: If this job is related to a past or current job please select it. Hint: type the name of person who requested it.', related_name='_ymacspatialrequest_related_jobs_+', to='ymac_db.YMACSpatialRequest'),
        ),
        migrations.AddField(
            model_name='ymacspatialrequest',
            name='request_type',
            field=models.ForeignKey(help_text='Please try to determine what sort of request you have before completing this form.', on_delete=django.db.models.deletion.CASCADE, to='ymac_db.RequestType'),
        ),
        migrations.AddField(
            model_name='ymacspatialrequest',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ymac_db.RequestUser'),
        ),
        migrations.AddField(
            model_name='ymacrequestfiles',
            name='request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ymac_db.YMACSpatialRequest'),
        ),
        migrations.AddField(
            model_name='surveydocument',
            name='file_status',
            field=models.ForeignKey(blank=True, help_text='If Spatial What type of data is it?', null=True, on_delete=django.db.models.deletion.CASCADE, to='ymac_db.SurveyStatus'),
        ),
        migrations.AddField(
            model_name='researchsite',
            name='groups',
            field=models.ManyToManyField(help_text='Site belong to any groups', to='ymac_db.YmacClaim'),
        ),
        migrations.AddField(
            model_name='researchsite',
            name='informants',
            field=models.ManyToManyField(help_text='Site belong to any groups', to='ymac_db.SiteInformant'),
        ),
        migrations.AddField(
            model_name='researchsite',
            name='site',
            field=models.ForeignKey(blank=True, help_text='The Spatial Site Data (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='ymac_db.Site'),
        ),
        migrations.AddField(
            model_name='researchsite',
            name='site_type',
            field=models.ManyToManyField(help_text='Pick match site types or add a new one', to='ymac_db.SiteType'),
        ),
        migrations.AddField(
            model_name='heritagesurveydata',
            name='survey_document',
            field=models.ForeignKey(help_text='The Document where the data comes from', on_delete=django.db.models.deletion.CASCADE, to='ymac_db.SurveyDocument'),
        ),
        migrations.AddField(
            model_name='heritagesurvey',
            name='data_source',
            field=models.ManyToManyField(blank=True, help_text='Any comments or data relating to the data', related_name='surveys', to='ymac_db.SurveyCleaning'),
        ),
        migrations.AddField(
            model_name='heritagesurvey',
            name='data_status',
            field=models.ForeignKey(blank=True, help_text='For current spatial data is it proposed or after survey completion (Actual)', null=True, on_delete=django.db.models.deletion.CASCADE, to='ymac_db.SurveyStatus'),
        ),
        migrations.AddField(
            model_name='heritagesurvey',
            name='documents',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='Related documents', related_name='surveys', to='ymac_db.SurveyDocument'),
        ),
        migrations.AddField(
            model_name='heritagesurvey',
            name='mod_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mod_user', to='ymac_db.SiteUser'),
        ),
        migrations.AddField(
            model_name='heritagesurvey',
            name='proponent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ymac_db.Proponent'),
        ),
        migrations.AddField(
            model_name='heritagesurvey',
            name='proponent_codes',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='Any proponent codes relating to the survey i.e RIO Area Codes AR-00-00000', to='ymac_db.SurveyProponentCode'),
        ),
        migrations.AddField(
            model_name='heritagesurvey',
            name='related_surveys',
            field=models.ManyToManyField(blank=True, to='ymac_db.RelatedSurveyCode'),
        ),
        migrations.AddField(
            model_name='heritagesurvey',
            name='sampling_conf',
            field=models.ForeignKey(blank=True, default=5, null=True, on_delete=django.db.models.deletion.CASCADE, to='ymac_db.SamplingConfidence'),
        ),
        migrations.AddField(
            model_name='heritagesurvey',
            name='sampling_meth',
            field=models.ForeignKey(blank=True, db_column='sampling_meth', default=6, null=True, on_delete=django.db.models.deletion.CASCADE, to='ymac_db.SampleMethodology'),
        ),
        migrations.AddField(
            model_name='heritagesurvey',
            name='survey_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ymac_db.SurveyGroup'),
        ),
        migrations.AddField(
            model_name='heritagesurvey',
            name='survey_methodologies',
            field=models.ManyToManyField(blank=True, db_index=True, to='ymac_db.SurveyMethodology'),
        ),
        migrations.AddField(
            model_name='heritagesurvey',
            name='survey_type',
            field=models.ForeignKey(blank=True, db_column='survey_type', null=True, on_delete=django.db.models.deletion.CASCADE, to='ymac_db.SurveyType'),
        ),
        migrations.AddField(
            model_name='heritagesite',
            name='heritage_surveys',
            field=models.ManyToManyField(related_name='her_sites', to='ymac_db.HeritageSurvey'),
        ),
        migrations.AddField(
            model_name='heritagesite',
            name='site',
            field=models.ForeignKey(blank=True, help_text='The Spatial Site Data', null=True, on_delete=django.db.models.deletion.CASCADE, to='ymac_db.Site'),
        ),
        migrations.AddField(
            model_name='heritagesite',
            name='site_description',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ymac_db.SiteDescriptions'),
        ),
        migrations.AddField(
            model_name='emit',
            name='tenement',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ymac_db.TenementsAll'),
        ),
        migrations.AddField(
            model_name='department',
            name='head',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ymac_db.YmacStaff'),
        ),
        migrations.AlterIndexTogether(
            name='heritagesurvey',
            index_together=set([('survey_id', 'trip_number')]),
        ),
    ]
